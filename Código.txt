#include <stdio.h>
#include <webots/robot.h>
#include <webots/motor.h>
#include <webots/distance_sensor.h>
#include <webots/led.h>
#include <webots/supervisor.h>

/*

 * You may want to add macros here.

 */
#define TIME_STEP 256
#define QtddSensoresProx 8
#define QtddLeds 10

/*

 * This is the main program.

 * The arguments of the main function can be specified by the

 * "controllerArgs" field of the Robot node

 */

int main(int argc, char **argv) {
  int i=0;
  char texto[256];
  double LeituraSensorProx[QtddSensoresProx];
  double AceleradorDireito=1.0, AceleradorEsquerdo=1.0;
  const double *caixa1PosInicPont, *caixa2PosInicPont, *caixa3PosInicPont, *caixa4PosInicPont, *caixa5PosInicPont, *caixa6PosInicPont, *caixa7PosInicPont, *caixa8PosInicPont;
  const double *caixa1Pos, *caixa2Pos, *caixa3Pos, *caixa4Pos, *caixa5Pos, *caixa6Pos, *caixa7Pos, *caixa8Pos;
  double caixa1PosInicX, caixa1PosInicY;
  double caixa2PosInicX, caixa2PosInicY;
  double caixa3PosInicX, caixa3PosInicY;
  double caixa4PosInicX, caixa4PosInicY;
  double caixa5PosInicX, caixa5PosInicY;
  double caixa6PosInicX, caixa6PosInicY;
  double caixa7PosInicX, caixa7PosInicY;
  double caixa8PosInicX, caixa8PosInicY;
  

  /* necessary to initialize webots stuff */
  for(i=0;i<256;i++) texto[i]='0';
  
  wb_robot_init();
  
  WbNodeRef caixa1 = wb_supervisor_node_get_from_def("caixa1");
  WbFieldRef caixa1Trans = wb_supervisor_node_get_field(caixa1, "translation");
  
  WbNodeRef caixa2 = wb_supervisor_node_get_from_def("caixa2");
  WbFieldRef caixa2Trans = wb_supervisor_node_get_field(caixa2, "translation");
  
  WbNodeRef caixa3 = wb_supervisor_node_get_from_def("caixa3");
  WbFieldRef caixa3Trans = wb_supervisor_node_get_field(caixa3, "translation");
  
  WbNodeRef caixa4 = wb_supervisor_node_get_from_def("caixa4");
  WbFieldRef caixa4Trans = wb_supervisor_node_get_field(caixa4, "translation");
  
  WbNodeRef caixa5 = wb_supervisor_node_get_from_def("caixa5");
  WbFieldRef caixa5Trans = wb_supervisor_node_get_field(caixa5, "translation");
  
  WbNodeRef caixa6 = wb_supervisor_node_get_from_def("caixa6");
  WbFieldRef caixa6Trans = wb_supervisor_node_get_field(caixa6, "translation");
  
  WbNodeRef caixa7 = wb_supervisor_node_get_from_def("caixa7");
  WbFieldRef caixa7Trans = wb_supervisor_node_get_field(caixa7, "translation");
  
  WbNodeRef caixa8 = wb_supervisor_node_get_from_def("caixa8");
  WbFieldRef caixa8Trans = wb_supervisor_node_get_field(caixa8, "translation");
  
  caixa1PosInicPont = wb_supervisor_field_get_sf_vec3f(caixa1Trans);
  caixa1PosInicX = caixa1PosInicPont[0];
  caixa1PosInicY = caixa1PosInicPont[1];
  
  caixa2PosInicPont = wb_supervisor_field_get_sf_vec3f(caixa2Trans);
  caixa2PosInicX = caixa2PosInicPont[0];
  caixa2PosInicY = caixa2PosInicPont[1];
  
  caixa3PosInicPont = wb_supervisor_field_get_sf_vec3f(caixa3Trans);
  caixa3PosInicX = caixa3PosInicPont[0];
  caixa3PosInicY = caixa3PosInicPont[1];
  
  caixa4PosInicPont = wb_supervisor_field_get_sf_vec3f(caixa4Trans);
  caixa4PosInicX = caixa4PosInicPont[0];
  caixa4PosInicY = caixa4PosInicPont[1];
  
  caixa5PosInicPont = wb_supervisor_field_get_sf_vec3f(caixa5Trans);
  caixa5PosInicX = caixa5PosInicPont[0];
  caixa5PosInicY = caixa5PosInicPont[1];
  
  caixa6PosInicPont = wb_supervisor_field_get_sf_vec3f(caixa6Trans);
  caixa6PosInicX = caixa6PosInicPont[0];
  caixa6PosInicY = caixa6PosInicPont[1];
  
  caixa7PosInicPont = wb_supervisor_field_get_sf_vec3f(caixa7Trans);
  caixa7PosInicX = caixa7PosInicPont[0];
  caixa7PosInicY = caixa7PosInicPont[1];
  
  caixa8PosInicPont = wb_supervisor_field_get_sf_vec3f(caixa8Trans);
  caixa8PosInicX = caixa8PosInicPont[0];
  caixa8PosInicY = caixa8PosInicPont[1];


  //configurei MOTORES

  WbDeviceTag MotorEsquerdo, MotorDireito;

  MotorEsquerdo = wb_robot_get_device("left wheel motor");
  MotorDireito = wb_robot_get_device("right wheel motor");

  wb_motor_set_position(MotorEsquerdo, INFINITY);
  wb_motor_set_position(MotorDireito, INFINITY);

  wb_motor_set_velocity(MotorEsquerdo,0);
  wb_motor_set_velocity(MotorDireito,0);

   //configurei Sensores de Proximidade

   WbDeviceTag SensorProx[QtddSensoresProx];
   
   SensorProx[0] = wb_robot_get_device("ps0");
   SensorProx[1] = wb_robot_get_device("ps1");
   SensorProx[2] = wb_robot_get_device("ps2");
   SensorProx[3] = wb_robot_get_device("ps3");
   SensorProx[4] = wb_robot_get_device("ps4");
   SensorProx[5] = wb_robot_get_device("ps5");
   SensorProx[6] = wb_robot_get_device("ps6");
   SensorProx[7] = wb_robot_get_device("ps7");  

   wb_distance_sensor_enable(SensorProx[0],TIME_STEP);
   wb_distance_sensor_enable(SensorProx[1],TIME_STEP);
   wb_distance_sensor_enable(SensorProx[2],TIME_STEP);
   wb_distance_sensor_enable(SensorProx[3],TIME_STEP);
   wb_distance_sensor_enable(SensorProx[4],TIME_STEP);
   wb_distance_sensor_enable(SensorProx[5],TIME_STEP);
   wb_distance_sensor_enable(SensorProx[6],TIME_STEP);
   wb_distance_sensor_enable(SensorProx[7],TIME_STEP);


   //config leds
    WbDeviceTag Leds[QtddLeds];
    Leds[0] = wb_robot_get_device("led0");
    Leds[1] = wb_robot_get_device("led1");
    Leds[2] = wb_robot_get_device("led2");
    Leds[3] = wb_robot_get_device("led3");
    Leds[4] = wb_robot_get_device("led4");
    Leds[5] = wb_robot_get_device("led5");
    Leds[6] = wb_robot_get_device("led6");
    Leds[7] = wb_robot_get_device("led7");
    wb_led_set(Leds[0], -1);
    wb_led_set(Leds[1], -1);
    wb_led_set(Leds[2], -1);
    wb_led_set(Leds[3], -1);
    wb_led_set(Leds[4], -1);
    wb_led_set(Leds[5], -1);
    wb_led_set(Leds[6], -1);
    wb_led_set(Leds[7], -1);

  /*

   * You should declare here WbDeviceTag variables for storing

   * robot devices like this:

   *  WbDeviceTag my_sensor = wb_robot_get_device("my_sensor");

   *  WbDeviceTag my_actuator = wb_robot_get_device("my_actuator");

   */



  /* main loop

   * Perform simulation steps of TIME_STEP milliseconds

   * and leave the loop when the simulation is over

   */

  while (wb_robot_step(TIME_STEP) != -1) {
  


    for(i=0;i<256;i++) texto[i]=0;

    for(i=0;i<QtddSensoresProx;i++){
       LeituraSensorProx[i]= wb_distance_sensor_get_value(SensorProx[i])-60;
       //sprintf(texto,"%s|%d: %5.2f  ",texto,i,LeituraSensorProx[i]);
    }

    printf("%s\n",texto);
    


    if(LeituraSensorProx[0]>200 || LeituraSensorProx[1]>200 || LeituraSensorProx[2]>200){
      
      
      AceleradorDireito = 1;
      AceleradorEsquerdo = -1;
     }
      
    else if(LeituraSensorProx[6]>200 || LeituraSensorProx[7]>200 || LeituraSensorProx[5]>200){
      AceleradorDireito = -1;
      AceleradorEsquerdo = 1;
    }

    else {
      AceleradorDireito = 1;
      AceleradorEsquerdo = 1;
    }


    wb_motor_set_velocity(MotorEsquerdo,6.28*AceleradorEsquerdo);
    wb_motor_set_velocity(MotorDireito, 6.28*AceleradorDireito);
    
    
    caixa1Pos = wb_supervisor_field_get_sf_vec3f(caixa1Trans);
    caixa2Pos = wb_supervisor_field_get_sf_vec3f(caixa2Trans);
    caixa3Pos = wb_supervisor_field_get_sf_vec3f(caixa3Trans);
    caixa4Pos = wb_supervisor_field_get_sf_vec3f(caixa4Trans);
    caixa5Pos = wb_supervisor_field_get_sf_vec3f(caixa5Trans);
    caixa6Pos = wb_supervisor_field_get_sf_vec3f(caixa6Trans);
    caixa7Pos = wb_supervisor_field_get_sf_vec3f(caixa7Trans);
    caixa8Pos = wb_supervisor_field_get_sf_vec3f(caixa8Trans);
    
    
    if(round(caixa1Pos[0]*10000)/10000 != round(caixa1PosInicX*10000)/10000 || round(caixa1Pos[1]*10000)/10000 != round(caixa1PosInicY*10000)/10000){
        break;
    }
    
    if(round(caixa2Pos[0]*10000)/10000 != round(caixa2PosInicX*10000)/10000 || round(caixa2Pos[1]*10000)/10000 != round(caixa2PosInicY*10000)/10000){
        break;
    }
    
    if(round(caixa3Pos[0]*10000)/10000 != round(caixa3PosInicX*10000)/10000 || round(caixa3Pos[1]*10000)/10000 != round(caixa3PosInicY*10000)/10000){
        break;
    }
    
    if(round(caixa4Pos[0]*10000)/10000 != round(caixa4PosInicX*10000)/10000 || round(caixa4Pos[1]*10000)/10000 != round(caixa4PosInicY*10000)/10000){
        break;
    }
    
    if(round(caixa5Pos[0]*10000)/10000 != round(caixa5PosInicX*10000)/10000 || round(caixa5Pos[1]*10000)/10000 != round(caixa5PosInicY*10000)/10000){
        break;
    }
    
    if(round(caixa6Pos[0]*10000)/10000 != round(caixa6PosInicX*10000)/10000 || round(caixa6Pos[1]*10000)/10000 != round(caixa6PosInicY*10000)/10000){
        break;
    }
    
    if(round(caixa7Pos[0]*10000)/10000 != round(caixa7PosInicX*10000)/10000 || round(caixa7Pos[1]*10000)/10000 != round(caixa7PosInicY*10000)/10000){
        break;
    }
    
    if(round(caixa8Pos[0]*10000)/10000 != round(caixa8PosInicX*10000)/10000 || round(caixa8Pos[1]*10000)/10000 != round(caixa8PosInicY*10000)/10000){
        break;
    }

  };
  
  wb_motor_set_velocity(MotorEsquerdo, 0);
  wb_motor_set_velocity(MotorDireito, 0);
  
  wb_led_set(Leds[0], 1);
  wb_led_set(Leds[1], 1);
  wb_led_set(Leds[2], 1);
  wb_led_set(Leds[3], 1);
  wb_led_set(Leds[4], 1);
  wb_led_set(Leds[5], 1);
  wb_led_set(Leds[6], 1);
  wb_led_set(Leds[7], 1);

  /* Enter your cleanup code here */

  /* This is necessary to cleanup webots resources */

  wb_robot_cleanup();

  return 0;

}